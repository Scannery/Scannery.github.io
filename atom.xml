<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scannery的博客</title>
  <subtitle>让我看看你是否学有所成</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Scannery/Scannery.github.io/"/>
  <updated>2016-11-29T05:20:20.492Z</updated>
  <id>https://github.com/Scannery/Scannery.github.io/</id>
  
  <author>
    <name>Scannery</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>插入排序，归并排序，与复杂度O(n)的排序</title>
    <link href="https://github.com/Scannery/Scannery.github.io/2016/11/28/sort/"/>
    <id>https://github.com/Scannery/Scannery.github.io/2016/11/28/sort/</id>
    <published>2016-11-28T10:01:21.438Z</published>
    <updated>2016-11-29T05:20:20.492Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要提供常见的排序方式，快速排序请参考 &lt;a href=&quot;http://scannery.github.io/2016/06/12/cplus4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h1&gt;&lt;h3 id=&quot;1-插入排序简介&quot;&gt;&lt;a href=&quot;#1-插入排序简介&quot; class=&quot;headerlink&quot; title=&quot;1.插入排序简介&quot;&gt;&lt;/a&gt;1.插入排序简介&lt;/h3&gt;&lt;p&gt;  插入排序是一种简单的排序，复杂度为O（n2）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;插入排序适合小型数列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  本文使用的流程图网站为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://www.processon.com/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;  流程图如下&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://p1.bpimg.com/1949/645c77c1cbeac76c.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-插入排序的实现&quot;&gt;&lt;a href=&quot;#2-插入排序的实现&quot; class=&quot;headerlink&quot; title=&quot;2.插入排序的实现&quot;&gt;&lt;/a&gt;2.插入排序的实现&lt;/h3&gt;&lt;p&gt; C语言实现插入排序&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void insert_sort(int *arr, int arrlen)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int i = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int *j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int swap_num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	while (i &amp;lt; arrlen)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		for (j = arr+i; j != arr; j--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (*j &amp;lt; *(j - 1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				swap_num = *j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				*j = *(j - 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				*(j - 1) = swap_num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			else break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h1&gt;&lt;p&gt;  归并排序采用了分治的策略，首先，将数组分成有序数列的集合&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这里，所谓有序数列的集合，一般就是按二分法，得到的单个元素，需要log2（n）次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  然后，将得到的各有序数列两两整合，形成新的有序数列。再用新的有序数列进行两两整合……直到留下一个数列为止&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两两整合一个有序数列，需要 n 次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  其总体的复杂度为 O（nlog2(n)）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;归并排序，适合大量，不重复，上下限大的数据的排序，有快速排序相似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; ###1. 归并排序流程介绍&lt;/p&gt;
&lt;p&gt;   一图流：&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://p1.bpimg.com/1949/645c77c1cbeac76c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;###2. 用C实现归并排序&lt;/p&gt;
&lt;p&gt;   这里对归并排序的接口进行了封装，使之符合排序算法的统一形式。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void merge(int *arr,int *temp,int start,int middle,int end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int i,j,k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i = start;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	j = start;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	k = middle + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	while ((j &amp;lt;= middle) &amp;amp;&amp;amp; (k &amp;lt;= end))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (*(arr + j) &amp;lt;= *(arr + k)) *(temp + i++) = *(arr + j++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			else *(temp + i++) = *(arr + k++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	while (j &amp;lt;= middle) *(temp + i++) = *(arr + j++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	while (k &amp;lt;= end) *(temp + i++) = *(arr + k++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (i = start; i &amp;lt;= end; i++) *(arr + i) = *(temp + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void divide(int *arr, int *temp, int start, int end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (start == end) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int middle = (start + end) / 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		divide(arr, temp, start, middle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		divide(arr, temp, middle+1, end);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		merge(arr, temp, start, middle, end);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void merge_sort(int *arr, int arr_len)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int *temp = new int[arr_len];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (int i = 0; i &amp;lt; arr_len; i++) *(temp + i) = *(arr + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	divide(arr, temp, 0, arr_len-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	delete temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;O（n）的有限序列排序&quot;&gt;&lt;a href=&quot;#O（n）的有限序列排序&quot; class=&quot;headerlink&quot; title=&quot;O（n）的有限序列排序&quot;&gt;&lt;/a&gt;O（n）的有限序列排序&lt;/h1&gt;&lt;p&gt;   这种排序方式，要求数组里所有的数，都在指定区间M,N之间的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在实际的使用这种方式的时候，我们希望 M,N 尽量接近，且数组的数量 n 尽量的大&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   这种方式实际上是对数列中的数进行计数，然后从小到大进行展开。但复杂度，只有O（n）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在某个公司的笔试题中，问到过这个问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   用C实现这种排序：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sort&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void Onsort(int *arr, int arr_len,int minimum,int maximum)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int length = maximum - minimum + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int *p = new int[length];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (int i = 0; i &amp;lt; length; i++) *(p+i) = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (int i = 0; i &amp;lt; arr_len; i++) (*(p + (*(arr + i) - minimum)))++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int count = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (int i = 0; i &amp;lt; length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (*(p + i) != 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			for (int j = 1; j &amp;lt;= *(p + i); j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				*(arr + count) = i + minimum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	delete p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;下篇-敬请期待&quot;&gt;&lt;a href=&quot;#下篇-敬请期待&quot; class=&quot;headerlink&quot; title=&quot;下篇 敬请期待~&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#&quot;&gt;下篇&lt;/a&gt; 敬请期待~&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要提供常见的排序方式，快速排序请参考 &lt;a href=&quot;http://scannery.github.io/2016/06/12/cplus4/&quot;&gt;此文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h1&gt;&lt;h3 id=&quot;1-插入排序简介&quot;&gt;&lt;a href=&quot;#1-插入排序简介&quot; class=&quot;headerlink&quot; title=&quot;1.插入排序简介&quot;&gt;&lt;/a&gt;1.插入排序简介&lt;/h3&gt;&lt;p&gt;  插入排序是一种简单的排序，复杂度为O（n2）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;插入排序适合小型数列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  本文使用的流程图网站为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://www.processon.com/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>树的旋转与实现</title>
    <link href="https://github.com/Scannery/Scannery.github.io/2016/11/20/roll/"/>
    <id>https://github.com/Scannery/Scannery.github.io/2016/11/20/roll/</id>
    <published>2016-11-20T08:06:40.008Z</published>
    <updated>2016-11-29T05:20:33.072Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要提供作者解决问题的思路与方法，各位大神如果有别的方法，欢迎指出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;树旋&quot;&gt;&lt;a href=&quot;#树旋&quot; class=&quot;headerlink&quot; title=&quot;树旋&quot;&gt;&lt;/a&gt;树旋&lt;/h1&gt;&lt;h3 id=&quot;1-树旋是什么&quot;&gt;&lt;a href=&quot;#1-树旋是什么&quot; class=&quot;headerlink&quot; title=&quot;1.树旋是什么&quot;&gt;&lt;/a&gt;1.树旋是什么&lt;/h3&gt;&lt;p&gt;  树旋是对树进行旋转的操作，具体应用于高级二叉搜索树中，如AVL树与红黑树。使用旋转可以在不破坏树的顺序结构情况下，保证树的平衡。&lt;/p&gt;
&lt;p&gt;  树旋的时间复杂度为O（1），是效率很高的一种方式。通常，又分为左旋（zig）和右旋（zag）&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;2-树旋的举例&quot;&gt;&lt;a href=&quot;#2-树旋的举例&quot; class=&quot;headerlink&quot; title=&quot;2.树旋的举例&quot;&gt;&lt;/a&gt;2.树旋的举例&lt;/h3&gt;&lt;p&gt;  我们这里有一棵二叉搜索树，如下图（1）&lt;/p&gt;
&lt;p&gt;  当我们插入一个新的数，9时候，树就会失衡，如图（2）&lt;/p&gt;
&lt;p&gt;  我们需要对树进行一次旋转，降低它的高度&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这样做的意义是，保证，在N个元素的树中进行元素的查找时候，搜索复杂度不大于log2（N）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  首先，我们找到失衡点的位置，如图（3）.&lt;/p&gt;
&lt;p&gt;  我们发现右边偏重，且失衡点是右子树，于是我们需要对他进行左旋&lt;br&gt;  左旋的过程如图（4）（5）（6）&lt;/p&gt;
&lt;p&gt;  如图（6），树高变为原来的树高-1&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                                                                                                 树高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  5             5         root-&amp;gt;5       root-&amp;gt;5                 7           root-&amp;gt;7                1        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; / \           / \             / \           / \               / \               / \  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3   7         3   7           3   7         3  |  7     root-&amp;gt;5   8             5   8              2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   / \           / \             / \           |   \         / \   \           / \   \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  6   8         6   8           6   8          6    8       3   6   9         3   6   9 -----------3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     \               \               \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      9               9               9--------------------------------------------4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; （1）          (2)           （3）           （4）            （5）             （6）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  下边的树中，我们发现左边偏重，但失衡点是右子树，我们需要对2点左旋，5点右旋&lt;/p&gt;
&lt;p&gt;  （4）（5）如图，我们对2点进行左旋&lt;/p&gt;
&lt;p&gt;  （6）图，对5点进行一次右旋，结果如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                                                                                                    树高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    5             5               5             5                  5                 4                1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   / \           / \             / \             \                / \               / \ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2   7         2   7           2   7        2    7              4   7             2   5              2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; / \           / \             / \          / \                 /                 / \   \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1   4         1   4           1   4        1  | 4              2                 1   3   7------------3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 /               /            |               / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                3               3             3              1   3------------------------------------4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   （1）          (2)           （3）           （4）            （5）             （6）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-树旋的实现&quot;&gt;&lt;a href=&quot;#3-树旋的实现&quot; class=&quot;headerlink&quot; title=&quot;3.树旋的实现&quot;&gt;&lt;/a&gt;3.树旋的实现&lt;/h3&gt;&lt;p&gt;  这里不细究旋转在二叉搜索树中的各种判定与实现，有兴趣的同学可以自己学习，仅给出旋转的算法&lt;/p&gt;
&lt;p&gt;  树结构参考如下：&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tree *lc;&lt;span class=&quot;comment&quot;&gt;//左孩子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tree *rc;&lt;span class=&quot;comment&quot;&gt;//右孩子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tree *pa;&lt;span class=&quot;comment&quot;&gt;//父亲&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  以左旋为例，如下&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;zig&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tree *point)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tree *pare,*q,*r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pare = point-&amp;gt;pa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   q = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(point == pare -&amp;gt; lc) flag = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; flag = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(point-&amp;gt;rc != null) q = point -&amp;gt; rc -&amp;gt; lc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   r = point-&amp;gt;rc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   point -&amp;gt; rc = q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   q -&amp;gt; pa = point;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   r -&amp;gt; lc = point;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   point -&amp;gt; pa = r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag) pare -&amp;gt; lc = r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; pare -&amp;gt; rc = r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   r -&amp;gt; pa = pare;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;下篇-插入排序与归并排序&quot;&gt;&lt;a href=&quot;#下篇-插入排序与归并排序&quot; class=&quot;headerlink&quot; title=&quot;下篇 插入排序与归并排序~&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://scannery.github.io/2016/11/28/sort/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下篇&lt;/a&gt; 插入排序与归并排序~&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要提供作者解决问题的思路与方法，各位大神如果有别的方法，欢迎指出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;树旋&quot;&gt;&lt;a href=&quot;#树旋&quot; class=&quot;headerlink&quot; title=&quot;树旋&quot;&gt;&lt;/a&gt;树旋&lt;/h1&gt;&lt;h3 id=&quot;1-树旋是什么&quot;&gt;&lt;a href=&quot;#1-树旋是什么&quot; class=&quot;headerlink&quot; title=&quot;1.树旋是什么&quot;&gt;&lt;/a&gt;1.树旋是什么&lt;/h3&gt;&lt;p&gt;  树旋是对树进行旋转的操作，具体应用于高级二叉搜索树中，如AVL树与红黑树。使用旋转可以在不破坏树的顺序结构情况下，保证树的平衡。&lt;/p&gt;
&lt;p&gt;  树旋的时间复杂度为O（1），是效率很高的一种方式。通常，又分为左旋（zig）和右旋（zag）&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>走迷宫算法</title>
    <link href="https://github.com/Scannery/Scannery.github.io/2016/11/03/MiGong/"/>
    <id>https://github.com/Scannery/Scannery.github.io/2016/11/03/MiGong/</id>
    <published>2016-11-03T14:16:41.607Z</published>
    <updated>2016-11-29T05:16:46.375Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要提供作者解决问题的思路与方法，各位大神如果有别的方法，欢迎指出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-题目&quot;&gt;&lt;a href=&quot;#1-题目&quot; class=&quot;headerlink&quot; title=&quot;1.题目&quot;&gt;&lt;/a&gt;1.题目&lt;/h1&gt;&lt;p&gt;  设有一个迷宫，他是一个宽为M，长为N的数组&lt;/p&gt;
&lt;p&gt;  迷宫中，可以通行的地方值为1，不能通行的地方值为0&lt;/p&gt;
&lt;p&gt;  迷宫入口为A,B.出口为C,D.求小明走出迷宫的最短路径MIN，和路线图。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;  输入：第一行为M,N，其下为矩阵，每行为M个值，共N行，其后为入口和出口的坐标。&lt;/p&gt;
&lt;p&gt;  举例：&lt;/p&gt;
&lt;p&gt;  5,5&lt;br&gt;  1 0 0 0 0&lt;br&gt;  1 1 1 1 0&lt;br&gt;  0 1 0 1 0&lt;br&gt;  0 1 1 1 1&lt;br&gt;  0 0 0 1 1&lt;br&gt;  0,0,4,4 &lt;/p&gt;
&lt;p&gt;  要求输出如下：第一行为最短路径，其下为路线图&lt;/p&gt;
&lt;p&gt;  举例：&lt;/p&gt;
&lt;p&gt;  8&lt;br&gt;  2 0 0 0 0&lt;br&gt;  2 2 2 2 0&lt;br&gt;  0 1 0 2 0&lt;br&gt;  0 1 1 2 2&lt;br&gt;  0 0 0 1 2&lt;/p&gt;
&lt;h1 id=&quot;2-作者经历（废话为主，可以跳过）&quot;&gt;&lt;a href=&quot;#2-作者经历（废话为主，可以跳过）&quot; class=&quot;headerlink&quot; title=&quot;2.作者经历（废话为主，可以跳过）&quot;&gt;&lt;/a&gt;2.作者经历（废话为主，可以跳过）&lt;/h1&gt;&lt;h2 id=&quot;1-作者与该题目&quot;&gt;&lt;a href=&quot;#1-作者与该题目&quot; class=&quot;headerlink&quot; title=&quot;1 作者与该题目&quot;&gt;&lt;/a&gt;1 作者与该题目&lt;/h2&gt;&lt;p&gt;   本道题目，我在很多次的笔试中见过，其中不乏有各种知名的公司，比如百词斩&lt;/p&gt;
&lt;p&gt;   小公司的笔试题中更是不计其数，是出现频率很高的一道题&lt;/p&gt;
&lt;p&gt;   然而我一点也不意外的，全做错了&lt;/p&gt;
&lt;p&gt;   那个时候的我，对这道题的思考还并不全面。很多情况没有考虑进去&lt;/p&gt;
&lt;h2 id=&quot;2-老旧的思路与缺陷&quot;&gt;&lt;a href=&quot;#2-老旧的思路与缺陷&quot; class=&quot;headerlink&quot; title=&quot;2 老旧的思路与缺陷&quot;&gt;&lt;/a&gt;2 老旧的思路与缺陷&lt;/h2&gt;&lt;p&gt;   解决这种问题，我用屁股思考了一秒后，决定用递归来实现。模拟一个人在迷宫中行走的场景。&lt;/p&gt;
&lt;p&gt;   以下是我的各种实现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void go(int posX,int pozY,int dir)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   这种方式，考虑了&lt;strong&gt;不能倒退&lt;/strong&gt;的问题&lt;/p&gt;
&lt;p&gt;   dir用来记录前一步走的方向。但缺陷很快就出现了：&lt;/p&gt;
&lt;p&gt;   那就是，这个人只是在走，&lt;strong&gt;并不记忆&lt;/strong&gt;，很容易在迷宫里绕圈，出不来。&lt;/p&gt;
&lt;p&gt;   如上例，他就会出现以下的情况:&lt;/p&gt;
&lt;p&gt;   2 0 0 0 0&lt;br&gt;   2 2 2 2 0&lt;br&gt;   0 2 0 2 0&lt;br&gt;   0 2 2 2 1&lt;br&gt;   0 0 0 1 1&lt;/p&gt;
&lt;p&gt;   那么，我们的思路就是，这个人要对他每次经过的地方，&lt;strong&gt;做一个记号&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-思路与要点&quot;&gt;&lt;a href=&quot;#3-思路与要点&quot; class=&quot;headerlink&quot; title=&quot;3 思路与要点&quot;&gt;&lt;/a&gt;3 思路与要点&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;思路：对每次经过的地点做记号，解决了倒退与绕圈的问题。&lt;/p&gt;
&lt;p&gt;要点: 要及时擦除记号，防止正确的通路，前方被堵住，举例:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  迷宫矩阵:&lt;/p&gt;
&lt;p&gt;  1 0 0 0 0&lt;br&gt;  1 1 1 1 0&lt;br&gt;  0 1 0 0 0&lt;br&gt;  0 1 1 0 0&lt;br&gt;  0 0 1 1 1&lt;/p&gt;
&lt;p&gt;  出现以下的死路:&lt;/p&gt;
&lt;p&gt;  2 0 0 0 0&lt;br&gt;  2 2 3 4 0&lt;br&gt;  0 1 0 0 0&lt;br&gt;  0 1 1 0 0&lt;br&gt;  0 0 1 1 1&lt;/p&gt;
&lt;p&gt;  当这个人走到4这个位置时候，发现无路可走，返回到前一个3处，但3前方2的标记并没有擦除，无法后退。&lt;/p&gt;
&lt;p&gt;  这种问题的变体:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;青蛙从井底开始往上爬，每次上移消耗3体力，每次平移消耗1体力，每次下移不费体力，青蛙共有100体力，井是一个迷宫……（喵喵喵？），问青蛙可否爬到顶端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  这种问题，只要改变出井条件，再加一个体力值设定就好了&lt;/p&gt;
&lt;h1 id=&quot;4-程序实现&quot;&gt;&lt;a href=&quot;#4-程序实现&quot; class=&quot;headerlink&quot; title=&quot;4 程序实现&quot;&gt;&lt;/a&gt;4 程序实现&lt;/h1&gt;&lt;h2 id=&quot;1-程序代码&quot;&gt;&lt;a href=&quot;#1-程序代码&quot; class=&quot;headerlink&quot; title=&quot;1 程序代码&quot;&gt;&lt;/a&gt;1 程序代码&lt;/h2&gt;&lt;p&gt;  &lt;strong&gt;注意&lt;/strong&gt;：由于作者很懒，并没有按题目要求的输入方式来，大家自行调整&lt;/p&gt;
&lt;p&gt;  默认了，m,n为5，入口为0,0，出口为4,4。矩阵同开始题目的例子矩阵&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int a[5][5];//初始矩阵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int b[5][5];//保存的最小路径矩阵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int min_step = 0;//最小步数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void go(int posX,int posY,int step)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a[posX][posY] = 2; // 标记此处走过&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if((posX == 4) &amp;amp;&amp;amp; (posY == 4))  // 判断出口条件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if ((min_step == 0) || (min_step &amp;gt; step))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			min_step = step;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			for(int i = 0;i &amp;lt; 5;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				for(int j = 0; j &amp;lt; 5;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					b[i][j] = a[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		a[posX][posY] = 1;//此路尽头，释放此路&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	step++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if((posX != 0) &amp;amp;&amp;amp; (a[posX - 1][posY] == 1)) //left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		go(posX - 1 ,posY,step);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if((posX != 4) &amp;amp;&amp;amp; (a[posX + 1][posY] == 1)) //right,注意边界限制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		go(posX + 1,posY,step);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if((posY != 0) &amp;amp;&amp;amp; (a[posX][posY - 1] == 1)) //up&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		go(posX,posY - 1,step);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if((posY != 4) &amp;amp;&amp;amp; (a[posX][posY + 1] == 1)) //down,注意边界限制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		go(posX,posY + 1,step);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a[posX][posY] = 1; // 此路不通，重标此处&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for(i = 0;i &amp;lt; 5;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		for(j = 0;j &amp;lt; 5;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			scanf(&amp;quot;%d&amp;quot;,&amp;amp;num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			a[i][j] = num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	go(0,0,0); //入口设置，在此处更改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printf(&amp;quot;%d\n&amp;quot;,min_step);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for(j = 0;j &amp;lt; 5;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		for(i = 0;i &amp;lt; 5;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			printf(&amp;quot;%d &amp;quot;,b[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		printf(&amp;quot;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-运行过程展示&quot;&gt;&lt;a href=&quot;#2-运行过程展示&quot; class=&quot;headerlink&quot; title=&quot;2 运行过程展示:&quot;&gt;&lt;/a&gt;2 运行过程展示:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;排版好累啊……我选择不排……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 1 0 0 0  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 1 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 1 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 2 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 2 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 2 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 2 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 1 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 0 1 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 2 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 2 0 0 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 2 2 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 2 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 1 2 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;5-Java大法好，C解决这种问题的不爽处，和解决办法&quot;&gt;&lt;a href=&quot;#5-Java大法好，C解决这种问题的不爽处，和解决办法&quot; class=&quot;headerlink&quot; title=&quot;5 Java大法好，C解决这种问题的不爽处，和解决办法&quot;&gt;&lt;/a&gt;5 Java大法好，C解决这种问题的不爽处，和解决办法&lt;/h1&gt;&lt;h2 id=&quot;1-C处理输入不便&quot;&gt;&lt;a href=&quot;#1-C处理输入不便&quot; class=&quot;headerlink&quot; title=&quot;1 C处理输入不便&quot;&gt;&lt;/a&gt;1 C处理输入不便&lt;/h2&gt;&lt;p&gt;  相信很多同学都死于输入格式不对，这里提醒各位&lt;/p&gt;
&lt;p&gt;  不要用 scanf !!!&lt;/p&gt;
&lt;p&gt;  不要用 cin !!!&lt;/p&gt;
&lt;p&gt;  这些函数会按空格把输入流截断（起码windows是这样），从而出现如下情况：&lt;/p&gt;
&lt;p&gt;  1 1 1 1 1&lt;/p&gt;
&lt;p&gt;  被截断为&lt;/p&gt;
&lt;p&gt;  1&lt;/p&gt;
&lt;p&gt;  这里推荐一下两种方式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char str[5]; //注意，千万别用 char *str。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gets(str);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这里调用标准库的gets函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char *str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read(STD_FILENO,str,1024)；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这里调用unix系统库里的函数，记住，先试一试笔试环境是否提供Unix环境&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般情况下，请用第一种方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-数组限制&quot;&gt;&lt;a href=&quot;#2-数组限制&quot; class=&quot;headerlink&quot; title=&quot;2 数组限制&quot;&gt;&lt;/a&gt;2 数组限制&lt;/h2&gt;&lt;p&gt;  绝大多数题目，会给出输入矩阵的大小的上限，比如M &amp;lt; 10,N &amp;lt; 12；&lt;/p&gt;
&lt;p&gt;  但总有无良题目，不给你上限，这tm就尴尬了&lt;/p&gt;
&lt;p&gt;  这时候，建议设一个很大的限制，比如100，不行继续增加数组容量。&lt;/p&gt;
&lt;h2 id=&quot;3-输入流解析&quot;&gt;&lt;a href=&quot;#3-输入流解析&quot; class=&quot;headerlink&quot; title=&quot;3 输入流解析&quot;&gt;&lt;/a&gt;3 输入流解析&lt;/h2&gt;&lt;p&gt;  对于输入流，大家可以比较简单的用字符串中，某一非空格位的字符值，与字符’0’相减，获得数组该位置的值。&lt;/p&gt;
&lt;p&gt;  也可以调用标准库函数，大家自行搜索。&lt;/p&gt;
&lt;h2 id=&quot;4-Java大法好&quot;&gt;&lt;a href=&quot;#4-Java大法好&quot; class=&quot;headerlink&quot; title=&quot;4 Java大法好&quot;&gt;&lt;/a&gt;4 Java大法好&lt;/h2&gt;&lt;p&gt;  有 Java 基础的同学，碰到这种题可以用 Java 解决，可以省掉很多很多的麻烦。这里就不提供范例了。&lt;/p&gt;
&lt;p&gt;  某些脚本语言也会很方便，比如js,python,go。毕竟有现成的库函数。&lt;/p&gt;
&lt;h3 id=&quot;下篇-树的旋转与实现&quot;&gt;&lt;a href=&quot;#下篇-树的旋转与实现&quot; class=&quot;headerlink&quot; title=&quot;下篇 树的旋转与实现&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://scannery.github.io/2016/11/20/roll/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下篇&lt;/a&gt; 树的旋转与实现&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要提供作者解决问题的思路与方法，各位大神如果有别的方法，欢迎指出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-题目&quot;&gt;&lt;a href=&quot;#1-题目&quot; class=&quot;headerlink&quot; title=&quot;1.题目&quot;&gt;&lt;/a&gt;1.题目&lt;/h1&gt;&lt;p&gt;  设有一个迷宫，他是一个宽为M，长为N的数组&lt;/p&gt;
&lt;p&gt;  迷宫中，可以通行的地方值为1，不能通行的地方值为0&lt;/p&gt;
&lt;p&gt;  迷宫入口为A,B.出口为C,D.求小明走出迷宫的最短路径MIN，和路线图。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从C到C++(5)：第一个自定义class</title>
    <link href="https://github.com/Scannery/Scannery.github.io/2016/06/25/cplus5/"/>
    <id>https://github.com/Scannery/Scannery.github.io/2016/06/25/cplus5/</id>
    <published>2016-06-25T14:34:39.114Z</published>
    <updated>2016-06-26T13:47:38.639Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文将介绍 c++ 基本的类操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-类与访问权限&quot;&gt;&lt;a href=&quot;#1-类与访问权限&quot; class=&quot;headerlink&quot; title=&quot;1. 类与访问权限&quot;&gt;&lt;/a&gt;1. 类与访问权限&lt;/h1&gt;&lt;p&gt;  类，新手可以看做含有函数的结构体。&lt;/p&gt;
&lt;p&gt;  在一个类中，变量和方法可以声明为 private，public，或 protected.他们的区别如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 当你在类外使用一个类的对象的时候：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  你可以通过，&lt;strong&gt;对象名.变量&lt;/strong&gt;，来访问声明为 &lt;strong&gt;public&lt;/strong&gt; 的变量或方法。其他两者则不可以。&lt;/p&gt;
&lt;p&gt;  子类对象可以访问父类对象的 protected 和 public 变量或方法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;关于父子类会在后文说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  一个简单例子：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Test&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i; &lt;span class=&quot;comment&quot;&gt;//i是一个 public 变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j; &lt;span class=&quot;comment&quot;&gt;//j也是一个 public 变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//deploy 是一个 public 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m; &lt;span class=&quot;comment&quot;&gt;//m 是一个private变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;//别忘了这个分号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  可以新学的朋友，不明白为什么把变量设为 private。这是为了实现对数据的封装。&lt;/p&gt;
&lt;p&gt;  即，&lt;strong&gt;你的类拿去给别人使用的时候，你并不一定希望别人通过访问改变你类中的变量。而是只想让别人用到你提供给他用的东西&lt;/strong&gt;。实现了数据的保护。&lt;/p&gt;
&lt;p&gt;  某些情况下。你希望你的伙伴可以得到变量的值，但不希望他们更改。我们可以用以下方式达成这个目的&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Test&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;return m&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  通过一个 getm() 的函数，在别人需要使用 m 的时候，可以通过这个函数来得到 m 的值。但他无法修改这个值。&lt;/p&gt;
&lt;h1 id=&quot;2-构造函数&quot;&gt;&lt;a href=&quot;#2-构造函数&quot; class=&quot;headerlink&quot; title=&quot;2. 构造函数&quot;&gt;&lt;/a&gt;2. 构造函数&lt;/h1&gt;&lt;p&gt;  大家在使用 string 类的时候，会发现，string 类在初始化的时候，并不像我们再第一节中那样，声明对象，再给对象赋值的方式来进行构造。而是采用如下的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;liya&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这里，便是采用了类的构造函数。构造函数用于生成一个类（而不是声明）。大家可以理解为，为类成员变量赋值的函数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;构造函数可以为 private 变量进行赋值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  一个简单的构造函数的例子&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Test&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Test(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i1,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j1):i(i1),j(j1)&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 简单解释一下这个构造函造函数：&lt;/p&gt;
&lt;p&gt; 首先，&lt;strong&gt;构造函数的名称必须与类名相同&lt;/strong&gt;，而且，构造函数没有任何返回值。&lt;/p&gt;
&lt;p&gt; 上述写法，为构造函数名(形参1，形参2):类变量（形参1），类变量（形参2）{}&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;意义为，将形参1赋予类变量1，将形参2赋予变量2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 上述的构造函数等价于这种形式:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Test::Test(int i1,int j1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   i = i1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   j = j1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 在上述函数中，我们使用前缀 Test:: 来表示他是 Test 类中的函数。这样写可以在类外定义类中的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前提是他在类中声明过&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Test&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Test(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//声明函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test::Test(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i1,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j1) &lt;span class=&quot;comment&quot;&gt;//类外实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   i = i1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   j = j1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  需要定义该类的对象时候，我们用如下的方式进行构造&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test a(i,j);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  上述方式定义了一个名为 a 的 Test 类对象。对象的 i,j 值被赋予。&lt;/p&gt;
&lt;h1 id=&quot;3-函数的重载&quot;&gt;&lt;a href=&quot;#3-函数的重载&quot; class=&quot;headerlink&quot; title=&quot;3. 函数的重载&quot;&gt;&lt;/a&gt;3. 函数的重载&lt;/h1&gt;&lt;p&gt; 在 C++ 中，可以存在有函数名相同，但形参不同的函数，这样我们可以使用一个函数名，对多类数据类型进行处理。&lt;/p&gt;
&lt;p&gt; 如下:&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i&amp;gt;j) return i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; return j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...具体内容省略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  如上所示，我们定义了三个名为 max 的函数。当我们需要调用的时候，系统会根据所给参数的多少，来确定具体调用哪个函数。&lt;/p&gt;
&lt;p&gt;  同理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;构造函数也是可以进行重载的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  如下：&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Test&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Test(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j):i(i),j(j)&amp;#123;&amp;#125;  &lt;span class=&quot;comment&quot;&gt;//构造函数一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Test(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m):i(i),j(j),m(m)&amp;#123;&amp;#125;  &lt;span class=&quot;comment&quot;&gt;//构造函数二&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Test()&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//构造函数三&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-类的共享&quot;&gt;&lt;a href=&quot;#4-类的共享&quot; class=&quot;headerlink&quot; title=&quot;4. 类的共享&quot;&gt;&lt;/a&gt;4. 类的共享&lt;/h1&gt;&lt;p&gt;  很多 cpp 新人可能会不解，在一个 project 里，如何做到类在不同 .cpp 文件中的共享。作为一个从 .java 转过来的人，我就有过这样的疑问。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java 中，可以直接进行引用，而 C++ 中，需要采用如下方式：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  首先：&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;将你要分享的类，写到一个 .h 文件里&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  其次：&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;在你需要引用该类的文件里，引用这个文件作为头文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  这也是为什么类的函数在类外实现的原因之一。为了不让 .h 文件看起来过于繁杂。将 .h 文件中类的方法写在文件外，使之变得更有可读性。&lt;/p&gt;
&lt;h1 id=&quot;5-类的命名&quot;&gt;&lt;a href=&quot;#5-类的命名&quot; class=&quot;headerlink&quot; title=&quot;5. 类的命名&quot;&gt;&lt;/a&gt;5. 类的命名&lt;/h1&gt;&lt;p&gt;  一些约定俗称的规则，可以让你的程序更具可读性。&lt;/p&gt;
&lt;p&gt;  类的定义，类名，首字母要大写。 比如 class Test;&lt;/p&gt;
&lt;p&gt;  方法名和变量名，采用第一个单词小写，其余单词大写的方式， 比如 int getIndexOf();&lt;/p&gt;
&lt;h3 id=&quot;下篇-从C到C-6-：析构函数和友元函数&quot;&gt;&lt;a href=&quot;#下篇-从C到C-6-：析构函数和友元函数&quot; class=&quot;headerlink&quot; title=&quot;下篇 从C到C++(6)：析构函数和友元函数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#&quot;&gt;下篇&lt;/a&gt; 从C到C++(6)：析构函数和友元函数&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将介绍 c++ 基本的类操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-类与访问权限&quot;&gt;&lt;a href=&quot;#1-类与访问权限&quot; class=&quot;headerlink&quot; title=&quot;1. 类与访问权限&quot;&gt;&lt;/a&gt;1. 类与访问权限&lt;/h1&gt;&lt;p&gt;  类，新手可以看做含有函数的结构体。&lt;/p&gt;
&lt;p&gt;  在一个类中，变量和方法可以声明为 private，public，或 protected.他们的区别如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 当你在类外使用一个类的对象的时候：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  你可以通过，&lt;strong&gt;对象名.变量&lt;/strong&gt;，来访问声明为 &lt;strong&gt;public&lt;/strong&gt; 的变量或方法。其他两者则不可以。&lt;/p&gt;
&lt;p&gt;  子类对象可以访问父类对象的 protected 和 public 变量或方法。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从C到C++(4)：迭代器Iterator</title>
    <link href="https://github.com/Scannery/Scannery.github.io/2016/06/12/cplus4/"/>
    <id>https://github.com/Scannery/Scannery.github.io/2016/06/12/cplus4/</id>
    <published>2016-06-12T05:35:51.784Z</published>
    <updated>2016-06-25T16:17:23.346Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文将介绍关于C++中迭代器的介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-一个简单的迭代器&quot;&gt;&lt;a href=&quot;#1-一个简单的迭代器&quot; class=&quot;headerlink&quot; title=&quot;1.一个简单的迭代器&quot;&gt;&lt;/a&gt;1.一个简单的迭代器&lt;/h1&gt;&lt;p&gt;  迭代器新手可以理解为，集合中元素的指针。如下，我们用 begin() 函数返回字符串首的指针&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string s=&amp;quot;dqcqczceqf&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string::iterator a=s.begin();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这样就定义了简单的迭代器，同理，我们也可以用 end() 函数来返回字符串尾的指针，也就是字符串尾的迭代器&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string::iterator a=s.end();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这样写的坏处是，前边那个名字太长了，绝大多数时候我们可以用以下方式来简化他&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;auto a=s.begin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;auto a=s.end();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;但不是所有情况，注意一下&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  同理，大家也可以在 vector 之类的容器上，使用迭代器&lt;/p&gt;
&lt;h1 id=&quot;2-迭代器的操作&quot;&gt;&lt;a href=&quot;#2-迭代器的操作&quot; class=&quot;headerlink&quot; title=&quot;2.迭代器的操作&quot;&gt;&lt;/a&gt;2.迭代器的操作&lt;/h1&gt;&lt;p&gt;  迭代器可以进行运算符的操作，如&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;string&amp;gt; a=&amp;#123;&amp;quot;dqcqa&amp;quot;,&amp;quot;cquwhqcq&amp;quot;,&amp;quot;hcqiiqe&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;auto c=a.begin(); // c 指向 a 的第一个元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c=c+5; // c 指向 a 的第六个元素  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c=c-1; // c 指向 a 的第五个元素&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  迭代器之间可以进行减法运算&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;必须是指向&lt;strong&gt;同一个容器&lt;/strong&gt;的迭代器，才可以进行运算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;auto b=a.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;auto c=b-a;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，有些编译器不认这些写法，最新版的 C++ 支持的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;3-指向类的迭代器&quot;&gt;&lt;a href=&quot;#3-指向类的迭代器&quot; class=&quot;headerlink&quot; title=&quot;3.指向类的迭代器&quot;&gt;&lt;/a&gt;3.指向类的迭代器&lt;/h1&gt;&lt;p&gt;  迭代器可以以指针的方式访问到类内的成员，如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class liya&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public :int a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        liya(int i):a(i)&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;liya&amp;gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;liya m(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.push_back(m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;liya&amp;gt;::iterator iter=c.begin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int i=iter-&amp;gt;a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;4-引用&quot;&gt;&lt;a href=&quot;#4-引用&quot; class=&quot;headerlink&quot; title=&quot;4.引用&quot;&gt;&lt;/a&gt;4.引用&lt;/h1&gt;&lt;p&gt;  C++ 中,定义了一种名为引用的类型，（由于上课时并未讲到，这里我就当做 C++ 中的特性了)&lt;/p&gt;
&lt;p&gt;  我们用以下方式来定义引用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int a=24;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int &amp;amp;refer=a;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这里定义了名为 refer 的引用，refer 指向 int 值 a&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与指针不同的是，refer 指向的单位不用 * 来访问，直接用引用名就可以了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  例如，我们这样来应用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int i=refer;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这里的 i 会具有和上边定义的 a 相同的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是，你可以理解为，引用是变量的另一个名字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  注意，引用必须是对象，而且必须与源对象相同，以下定义方法是错误的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int &amp;amp;m=100; //不行，100必须先有个名字，才能上引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float c=3.14;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int &amp;amp;d=c; //不行，必须与原对象格式相同&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  对象的简单应用，作为函数的传递值&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void swap(int &amp;amp;a,int &amp;amp;b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a=b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b=c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int a=3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int b=4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;swap(a,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  二者交换之后，结果为 a=4,b=3。在传输参数时，我们将函数的形参定义为引用，也就是a,b 在函数 swap 里的另一个名字&lt;/p&gt;
&lt;h1 id=&quot;5-迭代举例，快速排序算法&quot;&gt;&lt;a href=&quot;#5-迭代举例，快速排序算法&quot; class=&quot;headerlink&quot; title=&quot;5.迭代举例，快速排序算法&quot;&gt;&lt;/a&gt;5.迭代举例，快速排序算法&lt;/h1&gt;&lt;p&gt;  我们举一个快速排序的例子，来看看这种经典排序方法的执行步骤。&lt;/p&gt;
&lt;h3 id=&quot;1-快速排序的原理，&quot;&gt;&lt;a href=&quot;#1-快速排序的原理，&quot; class=&quot;headerlink&quot; title=&quot;1.快速排序的原理，&quot;&gt;&lt;/a&gt;1.快速排序的原理，&lt;/h3&gt;&lt;p&gt;  快速排序的本质是将数组一份为二。&lt;/p&gt;
&lt;p&gt;  首先，我们再数组中取一个 key 值，我们进行排序交换，将小于 key 的值放到 key 的左边，将大于 key 的值放在 key 的右边。&lt;/p&gt;
&lt;p&gt;  之后，我们将 key 左边，右边的数组进行同样方式的排序。再次分割，然后将分割后的四部分进行再次的快速排序……&lt;/p&gt;
&lt;p&gt;  直到，划分的每个数组元素量为1，或者，划分后的数组排序并没有经历过一个数据移动，即为数组子集的完成&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;值得一提的是，快速排序的时间复杂度为 n(log2(n)) ;相比于冒泡排序的 n平方 要快不少。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-简单的快速排序说明&quot;&gt;&lt;a href=&quot;#2-简单的快速排序说明&quot; class=&quot;headerlink&quot; title=&quot;2.简单的快速排序说明&quot;&gt;&lt;/a&gt;2.简单的快速排序说明&lt;/h3&gt;&lt;p&gt;  我们定义一下数组:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3,5,6,2,7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  取 key 为1，定义 i=0 ，j = 4（即数组的首和尾)&lt;/p&gt;
&lt;p&gt;  从尾开始排序，7&amp;gt;3，合理，2&amp;lt;3，交换2和3，数组变为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2,5,6,3,7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  这时候，j 的值保存为 3，i 变量进行自增，2&lt;3，但5&gt;3 ，交换二者&lt;/3，但5&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2,3,6,5,7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  这时候，i 的值保存，j再开始减，直到 i 的值和 j 的值相等时，我们发现&lt;/p&gt;
&lt;p&gt;  数组已经划分为 key 值3的左右两部分，左边小于三，右边大于三&lt;/p&gt;
&lt;p&gt;  我们将集合分为两部分，2，和6,5,7&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2    6,5,7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  2为单字，排序完成，进行6,5,7排序，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同上，取第一个数字 6 为 key 值。 i 设为起始值2，j设为子数组最大元素4.同理进行排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-用-c-实现快速排序&quot;&gt;&lt;a href=&quot;#3-用-c-实现快速排序&quot; class=&quot;headerlink&quot; title=&quot;3.用 c++ 实现快速排序&quot;&gt;&lt;/a&gt;3.用 c++ 实现快速排序&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void quiksort(int a[],int i,int j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (i&amp;lt;j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int qidian = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int zhongdian = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int key = a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		for (; j&amp;gt;i; j--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (a[j] &amp;lt; key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				c = a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				a[i] = a[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				a[j] = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				for (; i&amp;lt;j; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					if (a[i] &amp;gt; key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						c = a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						a[i] = a[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						a[j] = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		for (int c = 0; c &amp;lt; (sizeof(a) / sizeof(int)); c++) cout &amp;lt;&amp;lt; *(a + c) &amp;lt;&amp;lt; &amp;quot; &amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cout &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cout &amp;lt;&amp;lt; qidian &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; i - 1 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; j+1 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt;zhongdian &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		quiksort(a,qidian, i-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		quiksort(a, i+1, zhongdian);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	else return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-C-中的快速排序算法&quot;&gt;&lt;a href=&quot;#4-C-中的快速排序算法&quot; class=&quot;headerlink&quot; title=&quot;4.C++ 中的快速排序算法&quot;&gt;&lt;/a&gt;4.C++ 中的快速排序算法&lt;/h3&gt;&lt;p&gt;  可能大家看过上边的函数之后，发现和迭代器半毛钱关系都没有，这里我们提一个有关系的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在头文件 algorithm 中，定义了如下排序算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sort(迭代器开头,迭代器结尾,排序方式);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  迭代器头尾很好理解，排序方式可以省略，默认为升序。&lt;/p&gt;
&lt;p&gt;  我们可以用以下方式让他变为降序&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sort(begin,end,[](int a,int b)&amp;#123;return a&amp;gt;b;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这种写法，将第三个变量写为一个 lamda 函数，想了解更多可以问度，或者参考其他参考书。&lt;/p&gt;
&lt;h2 id=&quot;下篇-从C到C-5-：第一个自定义class&quot;&gt;&lt;a href=&quot;#下篇-从C到C-5-：第一个自定义class&quot; class=&quot;headerlink&quot; title=&quot;下篇 从C到C++(5)：第一个自定义class&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#&quot;&gt;下篇&lt;/a&gt; 从C到C++(5)：第一个自定义class&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将介绍关于C++中迭代器的介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-一个简单的迭代器&quot;&gt;&lt;a href=&quot;#1-一个简单的迭代器&quot; class=&quot;headerlink&quot; title=&quot;1.一个简单的迭代器&quot;&gt;&lt;/a&gt;1.一个简单的迭代器&lt;/h1&gt;&lt;p&gt;  迭代器新手可以理解为，集合中元素的指针。如下，我们用 begin() 函数返回字符串首的指针&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string s=&amp;quot;dqcqczceqf&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string::iterator a=s.begin();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这样就定义了简单的迭代器，同理，我们也可以用 end() 函数来返回字符串尾的指针，也就是字符串尾的迭代器&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string::iterator a=s.end();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这样写的坏处是，前边那个名字太长了，绝大多数时候我们可以用以下方式来简化他&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Scannery 的软件推荐：windows篇</title>
    <link href="https://github.com/Scannery/Scannery.github.io/2016/05/27/softintro/"/>
    <id>https://github.com/Scannery/Scannery.github.io/2016/05/27/softintro/</id>
    <published>2016-05-27T14:48:44.598Z</published>
    <updated>2016-05-31T11:13:54.601Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文将推荐一些个人用的习惯的软件&lt;/p&gt;
&lt;p&gt;博客大致会做到周更，闲时可能会多更&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Windows-软件&quot;&gt;&lt;a href=&quot;#Windows-软件&quot; class=&quot;headerlink&quot; title=&quot;Windows 软件&quot;&gt;&lt;/a&gt;Windows 软件&lt;/h1&gt;&lt;h2 id=&quot;bililocal-视频播放器&quot;&gt;&lt;a href=&quot;#bililocal-视频播放器&quot; class=&quot;headerlink&quot; title=&quot;bililocal 视频播放器&quot;&gt;&lt;/a&gt;bililocal 视频播放器&lt;/h2&gt;&lt;p&gt;  bililocal 视频播放器是一个 &lt;strong&gt;本地 &lt;/strong&gt;的弹幕播放器，他可以让你在看本地视频的同时同样可以享受到网络上的弹幕&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下载地址或想了解更多: &lt;a href=&quot;http://tieba.baidu.com/p/2319140116&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;软件更新帖&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;源码地址: &lt;a href=&quot;https://github.com/AncientLysine/BiliLocal/tree/master/src&quot;&gt;github源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本作还有linux版&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  界面如下:&lt;/p&gt;
 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; &lt;img src=&quot;http://i4.buimg.com/221d2eda2fcf398b.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bililocal 同时支持 Acfun 的弹幕&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  值得一提的是，博主的版本加载字幕时候会特别卡，可能最新版已经修复了这个问题&lt;/p&gt;
&lt;p&gt;  另外安利腾讯的QQ播放器，算是一个功能较为齐全，且适合国人使用习惯的播放器了，腾讯难得的良心软件&lt;/p&gt;
&lt;h2 id=&quot;chrome-谷歌浏览器&quot;&gt;&lt;a href=&quot;#chrome-谷歌浏览器&quot; class=&quot;headerlink&quot; title=&quot;chrome 谷歌浏览器&quot;&gt;&lt;/a&gt;chrome 谷歌浏览器&lt;/h2&gt;&lt;p&gt;  谷歌是一个值得尊敬的公司，作为一个国际级的公司，他的关注点在 &lt;strong&gt;前景&lt;/strong&gt; ，而非国内大部分公司所关心的 &lt;strong&gt;钱景&lt;/strong&gt; 上&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们熟悉的手机操作的系统 Android ,便由谷歌公司参与开发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  谷歌浏览器是一款非常好用的浏览器，并且有功能丰富且使用的小插件，比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;广告屏蔽插件 : Adguard&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;翻译插件 : Google Translate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;键盘操作插件，用键盘浏览网页 : Vimium&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更多知乎大大推荐的好用插件，戳&lt;a href=&quot;https://www.zhihu.com/question/19594682&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;谷歌浏览器的界面，清爽+简洁:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i4.buimg.com/5d5ca4ee787ab122.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;附链，&lt;a href=&quot;https://chrome.google.com/webstore/category/extensions?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;谷歌插件店&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Lantern&quot;&gt;&lt;a href=&quot;#Lantern&quot; class=&quot;headerlink&quot; title=&quot;Lantern&quot;&gt;&lt;/a&gt;Lantern&lt;/h2&gt;&lt;p&gt; 蓝灯是一款非常简单的翻墙软件，基本安装上之后，让他开机启动，就可以直接去墙外了。比较省事的一款软件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;值得一提的是，使用代理也可以加快访问非被墙网站的速度，比如git,twitch之类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 贴一张墙外的世界:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://i4.buimg.com/6b13ef0bc0d581a8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 附一些常用的墙外链:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;facebook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.tumblr.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最近被墙某网址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;steam-钱包掏空者&quot;&gt;&lt;a href=&quot;#steam-钱包掏空者&quot; class=&quot;headerlink&quot; title=&quot;steam , 钱包掏空者&quot;&gt;&lt;/a&gt;steam , 钱包掏空者&lt;/h2&gt;&lt;p&gt; G胖的邪恶嘴脸；&lt;/p&gt;
&lt;p&gt; 啥也不说了，我先去剁手……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;steam 是最大的PC游戏发售平台之一，这里可以接触到很多优秀的独立游戏和游戏大作。也是一个很好的交友平台，恩，男人的淘宝&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 对方不想和你说话，并向你扔了一个垃圾平台；&lt;/p&gt;
&lt;p&gt; 你接住了垃圾平台，并被抢光了钱；&lt;/p&gt;
&lt;h3 id=&quot;下篇-Scannery-的软件推荐：Andriod篇&quot;&gt;&lt;a href=&quot;#下篇-Scannery-的软件推荐：Andriod篇&quot; class=&quot;headerlink&quot; title=&quot;下篇 Scannery 的软件推荐：Andriod篇&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#&quot;&gt;下篇&lt;/a&gt; Scannery 的软件推荐：Andriod篇&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将推荐一些个人用的习惯的软件&lt;/p&gt;
&lt;p&gt;博客大致会做到周更，闲时可能会多更&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Windows-软件&quot;&gt;&lt;a href=&quot;#Windows-软件&quot; class=&quot;headerlink&quot; title=&quot;Windows 软件&quot;&gt;&lt;/a&gt;Windows 软件&lt;/h1&gt;&lt;h2 id=&quot;bililocal-视频播放器&quot;&gt;&lt;a href=&quot;#bililocal-视频播放器&quot; class=&quot;headerlink&quot; title=&quot;bililocal 视频播放器&quot;&gt;&lt;/a&gt;bililocal 视频播放器&lt;/h2&gt;&lt;p&gt;  bililocal 视频播放器是一个 &lt;strong&gt;本地 &lt;/strong&gt;的弹幕播放器，他可以让你在看本地视频的同时同样可以享受到网络上的弹幕&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下载地址或想了解更多: &lt;a href=&quot;http://tieba.baidu.com/p/2319140116&quot;&gt;软件更新帖&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;源码地址: &lt;a href=&quot;https://github.com/AncientLysine/BiliLocal/tree/master/src&quot;&gt;github源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本作还有linux版&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  界面如下:&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从C到C++(2)：你好，世界</title>
    <link href="https://github.com/Scannery/Scannery.github.io/2016/05/18/cplus2/"/>
    <id>https://github.com/Scannery/Scannery.github.io/2016/05/18/cplus2/</id>
    <published>2016-05-18T13:32:45.609Z</published>
    <updated>2016-05-31T11:20:26.945Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文将介绍C++的控制台输入输出，与string类的部分操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-你好，世界&quot;&gt;&lt;a href=&quot;#1-你好，世界&quot; class=&quot;headerlink&quot; title=&quot;1.你好，世界&quot;&gt;&lt;/a&gt;1.你好，世界&lt;/h1&gt;&lt;p&gt;   我们可以在任意文本编译器或IDE中，输入以下程序:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//用vs的同学请加上这句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;   经过编译，就可以在 cmd 上看到我们的成果了&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-C-中的标准输入和输出&quot;&gt;&lt;a href=&quot;#2-C-中的标准输入和输出&quot; class=&quot;headerlink&quot; title=&quot;2.C++中的标准输入和输出&quot;&gt;&lt;/a&gt;2.C++中的标准输入和输出&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;cin 与 cout 函数存在于头文件 &lt;strong&gt;iostream&lt;/strong&gt; 中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  这里说的输入输出只包括控制台的输出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;std::cin&amp;gt;&amp;gt;s&amp;gt;&amp;gt;s1&amp;gt;&amp;gt;s2&amp;gt;&amp;gt;sn;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  上式为标准输入，将控制台输入的值置入s中,s可以为整型，长整，浮点，字符串……&lt;/p&gt;
&lt;p&gt;  在标注了 using namespace std; 的情况下，上式可以简化为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cin&amp;gt;&amp;gt;s1&amp;gt;&amp;gt;s2&amp;gt;&amp;gt;sn;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  注意：&lt;strong&gt;使用连续的输入时，可以用空格来分割两个输入，也可以一个一个输入，即输入一个数据接空格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  比如，我用cin&amp;gt;&amp;gt;s1&amp;gt;&amp;gt;s2&amp;gt;&amp;gt;s3时，我可以这么输入:&lt;/p&gt;
&lt;p&gt;  s1\回车&lt;br&gt;  s2 s3\回车&lt;/p&gt;
&lt;p&gt;  c++的标准输出如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;std::cout&amp;lt;&amp;lt;输出1&amp;lt;&amp;lt;输出2&amp;lt;&amp;lt;输出n&amp;lt;&amp;lt;std::endl;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  c++标准输出由cout与endl两部分组成，输出为任意变量或用双引号引起的字符串&lt;/p&gt;
&lt;p&gt;  同理，在 using 掉 std 的情况下，上式简化为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cout&amp;lt;&amp;lt;输出1&amp;lt;&amp;lt;输出n&amp;lt;&amp;lt;endl;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  其中， endl 是end line 的意思，表明输出之后将自动换行&lt;/p&gt;
&lt;p&gt;  值得注意的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;不能用 cin 或 cout 直接输出非特殊类的对象&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  ps:大家可以通过问度来获取这些函数更多的用法，问谷歌可以得到更多，上谷歌需要翻墙才可以进行访问，有需求的朋友可以参考&lt;a href=&quot;http://scannery.github.io/2016/05/13/blogmake/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的另一篇博客&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-字符串类string与c-style-string&quot;&gt;&lt;a href=&quot;#3-字符串类string与c-style-string&quot; class=&quot;headerlink&quot; title=&quot;3.字符串类string与c_style string&quot;&gt;&lt;/a&gt;3.字符串类string与c_style string&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;string类的头文件为 &lt;strong&gt;string&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  相信大家都了解c_style的字符串的表达方式，在C中，我们用 &lt;strong&gt;字符串&lt;/strong&gt; 加上 &lt;strong&gt;\0&lt;/strong&gt; 的方式来存储一个字符串&lt;/p&gt;
&lt;p&gt;  比如说，如果我输入的字符串是 &lt;strong&gt;c++isverygood&lt;/strong&gt;,c会以一下方式来存储&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;c++isverygood\0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  如果这个字符串s来表示，s存储的将是这个字符串第一位的位置，也就c的存储位置，系统在读取字符串时，会沿c往后读，直到遇到\0&lt;/p&gt;
&lt;p&gt;  这种方式是不是很眼熟呢？没错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在C中，字符串的存储方式的本质是一个 &lt;strong&gt;字符数组&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  在C++中，我们同样可以用这种方式来定义一个字符串。但在本文中，我们将介绍另外一种更好用的定义方法：&lt;/p&gt;
&lt;p&gt;  如下，用string类来定义并使用一个字符串&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;s&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  注意，string类可以直接调用cin来输入；&lt;/p&gt;
&lt;h1 id=&quot;4-string类的初始化&quot;&gt;&lt;a href=&quot;#4-string类的初始化&quot; class=&quot;headerlink&quot; title=&quot;4.string类的初始化&quot;&gt;&lt;/a&gt;4.string类的初始化&lt;/h1&gt;&lt;p&gt;  在上面的程序中，我们用 string s 来声明一个字符串，但在声明的同时，给其赋予了初值空；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同样的，我们再定义其他数据类型时，系统也会赋予其一个初始值。如 int 型将被赋予0， boolean 型将被赋予 false&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  我们可以使用以下方式声明并初始化一个字符串:&lt;/p&gt;
 &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s=&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;； &lt;span class=&quot;comment&quot;&gt;//将abc复制入s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s(&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//将s定义为abc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//s为cccccccccc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s; &lt;span class=&quot;comment&quot;&gt;//s是一个空的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s1)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//将s1的值赋予s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  关于 string 类型还有很多的定义方法，但需要用 c++ 的朋友来说，这些足够了，需要拿 c++ 去应试的朋友，还是老老实实学更多吧&lt;/p&gt;
&lt;h1 id=&quot;5-string-类的常用方法&quot;&gt;&lt;a href=&quot;#5-string-类的常用方法&quot; class=&quot;headerlink&quot; title=&quot;5.string 类的常用方法&quot;&gt;&lt;/a&gt;5.string 类的常用方法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;s.empty()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  返回一个布尔值，如果字符串s为空，返回 true ，否则返回 false &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;布尔值用 &lt;strong&gt;boolean 变量&lt;/strong&gt; 定义,取值有 true 和 false ，在C语言中，我们用0表示 false ，用非0表示 true &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  关于更多布尔值的资料，请戳&lt;a href=&quot;#&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s.size()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  返回字符串的长度，注意，字符串的顺序是0到长度-1；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s[n]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  返回字符串 s 在 n 位置的 &lt;strong&gt;char&lt;/strong&gt; 的引用，大家可以将其理解为值，更多的引用得说明，请参照&lt;a href=&quot;http://scannery.github.io/2016/05/30/cplus3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  初学的朋友可以无视引用二字，理解为在n位置上的值就可以了&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;注意， s[s.size()] 越界了，最后一个字符是 s[s.size()-1]!!!&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s1+s2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  将 s1 与 s2 相连，如 s1 为 abc ，s2 为 bcd ，那么 s1+s2 的值为 abcbcd&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s1=s2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  将 s2 的值赋予 s1;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s.erase(起点,终点)&lt;br&gt;s.erase(位置)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  第一种方式，擦除字符串内起点到终点位置的字符，起点终点可以为 int 型或迭代器 string::iterator 型&lt;/p&gt;
&lt;p&gt;  第二种方式，擦除字符串中指定位置的字符，起点终点可以为 int 型或迭代器 string::iterator 型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s.push_back(字符)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  在字符串尾部加入一个字符&lt;/p&gt;
&lt;p&gt;  你也可以写成 &lt;strong&gt;s+字符&lt;/strong&gt; 来达成这个效果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s.c_str()&lt;br&gt;s.data()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  返回一个C风格的字符串，或者说成字符数组，用 c_str 将会有 \0 的结束符，data 则没有 \0 的结束符&lt;/p&gt;
&lt;h1 id=&quot;6-两个简单的应用-string-类程序&quot;&gt;&lt;a href=&quot;#6-两个简单的应用-string-类程序&quot; class=&quot;headerlink&quot; title=&quot;6.两个简单的应用 string 类程序&quot;&gt;&lt;/a&gt;6.两个简单的应用 string 类程序&lt;/h1&gt;&lt;p&gt;  遍历string中的数据:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for(char a: str) cout&amp;lt;&amp;lt;a&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  在C++中，我们可以用for(数据类型，不知道直接怼为auto : 数组名，vector 名，string 名)来遍历其中的数据&lt;/p&gt;
&lt;p&gt;##6.1,split方法&lt;/p&gt;
&lt;p&gt;  string split的方法，将字符串用指定标示符来分割:&lt;/p&gt;
&lt;p&gt;  如果字符串为 abcdeca ，用指定符 c 来分割，结果为 ab de a 三个字符串&lt;/p&gt;
&lt;p&gt;  &amp;lt; 本函数将结果存储在 Vector 中，Vector 的使用将在下篇提及:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; str_split(&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; str, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; sign)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; strs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c : str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c == sign)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			strs.push_back(split);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			split = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; split = split + c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	strs.push_back(split);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return strs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;6-2-trim-方法&quot;&gt;&lt;a href=&quot;#6-2-trim-方法&quot; class=&quot;headerlink&quot; title=&quot;6.2 trim 方法&quot;&gt;&lt;/a&gt;6.2 trim 方法&lt;/h2&gt;&lt;p&gt;  trim 方法的作用是，删除字符串两端的空格，中间的空格不予删除，如;&lt;/p&gt;
&lt;p&gt;  字符串” 我 就是力量的 化身   “，经过trim方法后的结果为：&lt;/p&gt;
&lt;p&gt;  “我 就是力量的 化身”&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp; &lt;span class=&quot;title&quot;&gt;str_trim&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp;s)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s.empty()) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.erase(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,s.find_first_not_of(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;)); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.erase(s.find_last_not_of(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;下篇-从C到C-3-：”万能”的vector&quot;&gt;&lt;a href=&quot;#下篇-从C到C-3-：”万能”的vector&quot; class=&quot;headerlink&quot; title=&quot;下篇 从C到C++(3)：”万能”的vector&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://scannery.github.io/2016/05/30/cplus3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下篇&lt;/a&gt; 从C到C++(3)：”万能”的vector&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将介绍C++的控制台输入输出，与string类的部分操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-你好，世界&quot;&gt;&lt;a href=&quot;#1-你好，世界&quot; class=&quot;headerlink&quot; title=&quot;1.你好，世界&quot;&gt;&lt;/a&gt;1.你好，世界&lt;/h1&gt;&lt;p&gt;   我们可以在任意文本编译器或IDE中，输入以下程序:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//用vs的同学请加上这句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;   经过编译，就可以在 cmd 上看到我们的成果了&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何hexo搭建属于自己的博客</title>
    <link href="https://github.com/Scannery/Scannery.github.io/2016/05/13/blogmake/"/>
    <id>https://github.com/Scannery/Scannery.github.io/2016/05/13/blogmake/</id>
    <published>2016-05-13T14:27:59.915Z</published>
    <updated>2016-05-14T02:56:04.392Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文旨在说明如何使用hexo搭建与操作博客的过程&lt;/p&gt;
&lt;p&gt;感谢这位朋友的博客，让我得以搭建成功，关于github的操作大家可以参考&lt;a href=&quot;http://www.jianshu.com/p/985d07d88ef4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇默认读者为windows系统，并已经成功建立github的代码仓库，并安装了git shell；没有请参考上方文档&lt;/p&gt;
&lt;p&gt;未建立代码仓库的读者，建议在读完上方文档关于github的操作后，返回读本章节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第一步-翻墙&quot;&gt;&lt;a href=&quot;#第一步-翻墙&quot; class=&quot;headerlink&quot; title=&quot;第一步.翻墙&quot;&gt;&lt;/a&gt;第一步.翻墙&lt;/h1&gt;&lt;p&gt;  这是非常重要的一步，没翻墙，访问github网址巨慢，这里提供一个出去的办法，戳&lt;a href=&quot;http://pan.baidu.com/s/1nv9yZAp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;获得软件，安装到电脑中并运行即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果链接被吞或者想了解更多，戳&lt;a href=&quot;http://nopescript.com/2016/05/11/great-wall-0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提供一个备用软件，&lt;a href=&quot;http://www.ishadowsocks.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ishadowsocks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;第二步-安装与配置hexo&quot;&gt;&lt;a href=&quot;#第二步-安装与配置hexo&quot; class=&quot;headerlink&quot; title=&quot;第二步.安装与配置hexo&quot;&gt;&lt;/a&gt;第二步.安装与配置hexo&lt;/h1&gt;&lt;h2 id=&quot;1-git-shell简介&quot;&gt;&lt;a href=&quot;#1-git-shell简介&quot; class=&quot;headerlink&quot; title=&quot;1.git shell简介&quot;&gt;&lt;/a&gt;1.git shell简介&lt;/h2&gt;&lt;p&gt;  git shell可以使你在电脑上运行shell语言，换而言之，你可以在这个窗口上运行部分linux系统上的命令行。你不懂也没关系，这里给出了一些常用的shell命令:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;方括号用来说明后边跟什么，输命令的时候不需要加上方括号&lt;/p&gt;
&lt;p&gt;最后提醒一遍，不知道说啥的朋友请先看&lt;a href=&quot;http://www.jianshu.com/p/985d07d88ef4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cd [路径名]:进入指定路径. 如 &lt;strong&gt;cd c:\Users\temp&lt;/strong&gt; 进入c\用户\temp的路径&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;路径是什么呢？就是这个东西，表示控制终端工作的地方，如图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.buimg.com/16d1c9d91dd04aff.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;特殊的，当前路径可以用 &lt;strong&gt;.&lt;/strong&gt; 来表示，比如 &lt;strong&gt;cd .&lt;/strong&gt; 就是进入当前文件夹,也就是没动……上一层的路径可以用 &lt;strong&gt;..&lt;/strong&gt; 来表示， &lt;strong&gt;cd ..&lt;/strong&gt; 就是进入上层路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;touch [文件名]:创建指定文件.如 &lt;strong&gt;touch cac.txt&lt;/strong&gt; 创建一个名为cac的txt文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cat [文件名]:将指定文件打印到控制台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rm [文件名]:删除指定文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;vim [文件名]:用vim文本编辑器打开文件，熟悉这个命令的朋友可以用vim来编辑下边谈到的文件，不熟悉的朋友建议别碰&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-hexo安装与部署&quot;&gt;&lt;a href=&quot;#2-hexo安装与部署&quot; class=&quot;headerlink&quot; title=&quot;2.hexo安装与部署&quot;&gt;&lt;/a&gt;2.hexo安装与部署&lt;/h2&gt;&lt;p&gt;  打开gitshell，记住你的当前路径，输入以下命令进行安装：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;大部分教程里使用npm，这里使用cnpm，前边的c可以理解为China，下载起来更快一些。我们等下载成功之后，也就是出现的代码中不出现error，使用以下命令进行安装:&lt;/p&gt;
&lt;p&gt;如果npm/cnmp无效，原因是Node.JS没有装好，建议重装，具体参考置顶链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init Hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  这步出现以下返回即为安装成功:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INFO Copying date to 你的路径\Hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO You are almost done!…………&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;   这步完成之后会在目录下生成hexo文件夹，我们需要在hexo文件夹里加入hexo运行需要的依赖文件，在控制台中输入以下命令:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd .\Hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;   除此之外，我们还需要一些其他的依赖文件,输入以下命令:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-generator-index --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-generator-archive --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-generator-category --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-generator-tag --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-deployer-heroku --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-deployer-rsync --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-deployer-openshift --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-renderer-marked@0.2 --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-renderer-stylus@0.2 --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-generator-feed@1 --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-generator-sitemap@1 --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如果cnpm命令失败，可以考虑去掉C使用npm，如果都不行，请检查网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第三步-生成本地文件，并将其推到github&quot;&gt;&lt;a href=&quot;#第三步-生成本地文件，并将其推到github&quot; class=&quot;headerlink&quot; title=&quot;第三步.生成本地文件，并将其推到github&quot;&gt;&lt;/a&gt;第三步.生成本地文件，并将其推到github&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本教程使用Sublime Text来编译文本，有经验的朋友可以用vim来编译&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不要直接用记事本打开&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  下载 Sublime Text ,戳&lt;a href=&quot;http://pan.baidu.com/s/1gf2PBJt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;进行度盘下载，如链接失效，请在下载并购买正版，或网上随便找一个破解版。&lt;/p&gt;
&lt;p&gt;  安装 sublime text,最好建个快捷方式到桌面，之后打开，点击 file\open Folder ，打开上面安装的hexo文件夹&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;忘了路径的朋友可以打开 git shell 进行确认,就在 git shell 工作路径下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  打开hexo文件夹里的 &lt;strong&gt;_config.yml&lt;/strong&gt; ,找到文件尾，修改为如下格式:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;斜杠后边是注释，不要写上去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: git //出错试试github&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repository: https://github.com/Scannery/Scannery.github.io.git //此处为你github里代码仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;！格式一点都不能变，deploy要顶格写，type/re/branch前边要有&lt;strong&gt;两个&lt;/strong&gt;空格，冒号后边要有&lt;strong&gt;一个&lt;/strong&gt;空格，还有，一定要用&lt;strong&gt;英文&lt;/strong&gt;的冒号！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  接下来，请依次输入以下命令:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;g指generate，生成本地文件&lt;/p&gt;
&lt;p&gt;d指deploy,将本地文件deploy到你用的github文件库里，这个需要联网的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;如果d不出现任何返回值，请检查是否遗漏步骤，漏掉必须的依赖&lt;/p&gt;
&lt;p&gt;如果g失败，请检查_config.yml文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  接下来，就可以一睹你博客的真容了，取你的库地址如 &lt;a href=&quot;https://github.com/Scannery/Scannery.github.io.git，去掉最后一个斜杠前边的部分和后边的git，如&quot;&gt;https://github.com/Scannery/Scannery.github.io.git，去掉最后一个斜杠前边的部分和后边的git，如&lt;/a&gt; Scannery.github.io，就是你的博客地址了。&lt;/p&gt;
&lt;p&gt;  附一些_config.yml中常用可修改的地方:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;title:&lt;/strong&gt; 此为你博客网页的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;subtitle:&lt;/strong&gt; 副标题，根据博客主题显示在不同的位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;author:&lt;/strong&gt; 作者，建议改成你自己的ID……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;url:&lt;/strong&gt; 建议改为你自己的IO库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，以上命令冒号后边一定要加个空格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;第四步-使用markdown书写一篇博文&quot;&gt;&lt;a href=&quot;#第四步-使用markdown书写一篇博文&quot; class=&quot;headerlink&quot; title=&quot;第四步.使用markdown书写一篇博文&quot;&gt;&lt;/a&gt;第四步.使用markdown书写一篇博文&lt;/h1&gt;&lt;p&gt;  markdown是一种文本编写方式，可以实现书写+排版同时进行，节省排版的时间，详细参考&lt;a href=&quot;http://baike.baidu.com/link?url=jIXWbh5bJdAgu65DV7ZnV3sH7ELKwp7G38VT0BhulUW-xraidGK3o5qDcBi3F4eaLVF5c2Ty1sderlmZ-b_iqa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度百科&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-新建一个markdown文件&quot;&gt;&lt;a href=&quot;#1-新建一个markdown文件&quot; class=&quot;headerlink&quot; title=&quot;1.新建一个markdown文件&quot;&gt;&lt;/a&gt;1.新建一个markdown文件&lt;/h2&gt;&lt;p&gt;  +在sublime里，寻找到hexo文件夹里的source文件夹，进入其中找到_posts，打开文件夹。&lt;/p&gt;
&lt;p&gt;  +&lt;strong&gt;点击左上角file,new file,创建一个新的文件，在sublime右下方找到plain text标签，左键，在列表中找到Markdown，点击并选取里边的markdown选项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  +按&lt;strong&gt;Ctrl+s&lt;/strong&gt;，选择到hexo\source_post文件夹下，并保存。&lt;/p&gt;
&lt;p&gt;  +在新建的文件上点击右键rename,将其改为md后缀名&lt;/p&gt;
&lt;h2 id=&quot;2-简单的markdown编写&quot;&gt;&lt;a href=&quot;#2-简单的markdown编写&quot; class=&quot;headerlink&quot; title=&quot;2.简单的markdown编写&quot;&gt;&lt;/a&gt;2.简单的markdown编写&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;不加任何特殊符号的文本为普通文本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用如下代码生成主标题:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: 如何hexo搭建属于自己的博客&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;使用#,##,###表示一级，二级，三级标题，如：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 标题1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 标题2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 标题3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;使用如下方式高亮一段文本&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;**你要高亮的文本**&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用&lt;strong&gt;+&lt;/strong&gt;或&lt;strong&gt;-&lt;/strong&gt;来生成无序表格，或标签:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ 文本1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ 文本2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ 文本3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用以下方式生成一个表格:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;| Tables        | Are           | Cool  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| ------------- |:-------------:| -----:|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| col 3 is      | right-aligned | $1600 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| col 2 is      | centered      |   $12 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| zebra stripes | are neat      |    $1 |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tables&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Are&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;col 3 is&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;right-aligned&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;col 2 is&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;centered&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zebra stripes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;are neat&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;strong&gt;&amp;gt;&lt;/strong&gt; 进行引用:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 这段文字被引用了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;   效果如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这段文字被引用了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;插入图片或链接:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;不知道说啥的朋友请先看[这篇文档](http://www.jianshu.com/p/985d07d88ef4)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将文字扩方括号来表示点击区域，括号后方为链接&lt;/p&gt;
&lt;p&gt;图片：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;![](http://i2.buimg.com/16d1c9d91dd04aff.jpg)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;引用图片格式为，感叹号后接方括号，后面再接图片的网络地址&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网络图片的地址可以通过右键获得。本地图片可以上传到图床，比如&lt;a href=&quot;http://tuchuang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个&lt;/a&gt;后获得网络地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入代码块，使用上下各三个~来分割代码区。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在写作并保存博文后，在Git shell中先用hexo g，来更新本地文件，再使用hexo d推流到服务器端，就可以看到你写作好的博文啦,更换主题/或其他变动同理&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;第五步-配置hexo的主题&quot;&gt;&lt;a href=&quot;#第五步-配置hexo的主题&quot; class=&quot;headerlink&quot; title=&quot;第五步.配置hexo的主题&quot;&gt;&lt;/a&gt;第五步.配置hexo的主题&lt;/h1&gt;&lt;p&gt;   主题可以让你拥有自己的规划的外观，例如此处使用的yilia主题，详情参考&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   主题存放在hexo\theme里，也有属于自己的_config.yml，可以通过修改这个文件进行主题操作，各主题相异就不具体讨论了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，主题_config.yml里的favicon是你的网站图标，需要为png格式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   知乎大大推荐的主题，戳&lt;a href=&quot;http://www.zhihu.com/question/24422335&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;第六步-将主站挂到google&quot;&gt;&lt;a href=&quot;#第六步-将主站挂到google&quot; class=&quot;headerlink&quot; title=&quot;第六步.将主站挂到google&quot;&gt;&lt;/a&gt;第六步.将主站挂到google&lt;/h1&gt;&lt;p&gt;  百度作者并没有试过，大家可以试一试。好像要到百度的站长之家里看&lt;/p&gt;
&lt;p&gt;  google的话，使用Search Console添加即可，google自身提供了非常详细的教程，这里就不赘述了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果采用html的验证方式，请将google给的文件放到hexo\public目录下即可&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文旨在说明如何使用hexo搭建与操作博客的过程&lt;/p&gt;
&lt;p&gt;感谢这位朋友的博客，让我得以搭建成功，关于github的操作大家可以参考&lt;a href=&quot;http://www.jianshu.com/p/985d07d88ef4&quot;&gt;这篇文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇默认读者为windows系统，并已经成功建立github的代码仓库，并安装了git shell；没有请参考上方文档&lt;/p&gt;
&lt;p&gt;未建立代码仓库的读者，建议在读完上方文档关于github的操作后，返回读本章节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第一步-翻墙&quot;&gt;&lt;a href=&quot;#第一步-翻墙&quot; class=&quot;headerlink&quot; title=&quot;第一步.翻墙&quot;&gt;&lt;/a&gt;第一步.翻墙&lt;/h1&gt;&lt;p&gt;  这是非常重要的一步，没翻墙，访问github网址巨慢，这里提供一个出去的办法，戳&lt;a href=&quot;http://pan.baidu.com/s/1nv9yZAp&quot;&gt;这里&lt;/a&gt;获得软件，安装到电脑中并运行即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果链接被吞或者想了解更多，戳&lt;a href=&quot;http://nopescript.com/2016/05/11/great-wall-0/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提供一个备用软件，&lt;a href=&quot;http://www.ishadowsocks.net/&quot;&gt;ishadowsocks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从C到C++(1)：面向对象是什么</title>
    <link href="https://github.com/Scannery/Scannery.github.io/2016/05/12/cplus1/"/>
    <id>https://github.com/Scannery/Scannery.github.io/2016/05/12/cplus1/</id>
    <published>2016-05-12T11:31:57.848Z</published>
    <updated>2016-05-19T13:09:13.825Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文目的是让读者更简单的理解面向对象的概念，所以会有不严谨的地方，请原谅&lt;/p&gt;
&lt;p&gt;本系列内容适合有C基础的朋友阅读，如没有请戳&lt;a href=&quot;http://c.biancheng.net/cpp/u/c18/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-什么是对象&quot;&gt;&lt;a href=&quot;#1-什么是对象&quot; class=&quot;headerlink&quot; title=&quot;1.什么是对象&quot;&gt;&lt;/a&gt;1.什么是对象&lt;/h2&gt;&lt;p&gt;   对象是什么？你的女朋友，或者你未来会有的女朋友，然后呢，举个小学语文上的例子：&lt;/p&gt;
&lt;p&gt;   小明在篮球场跳&lt;a href=&quot;http://www.bilibili.com/video/av2130097/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;普通的disco&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   是谁在篮球场发疯呢？是小明，也就是说，在篮球场上发疯的&lt;strong&gt;对象&lt;/strong&gt;是&lt;strong&gt;小明&lt;/strong&gt;，小明就是一个对象;那我们换个问法呢，小明在哪儿发疯呢？是篮球场，同理我们可以得出，&lt;strong&gt;篮球场&lt;/strong&gt;是小明跳舞的&lt;strong&gt;对象&lt;/strong&gt;。当然，智商比作者高的你肯定能得出一个结论，那普通的disco也是对象咯？答案是正确的，我们可以得出一个结论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;万物皆对象&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   “但是，小明他爱跳跳，关我卵事啊？”&lt;/p&gt;
&lt;p&gt;   是的，我们并不关心小明跳不跳舞，我们只关心我们需要的东西，所以，在编程中，我们将我们需要解决的问题，这个问题所需要的东西，抽象为对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在编程中，我们只会用到自己需要的对象，并舍弃不必要的对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;2-什么是类，类和对象asshole-trade&quot;&gt;&lt;a href=&quot;#2-什么是类，类和对象asshole-trade&quot; class=&quot;headerlink&quot; title=&quot;2.什么是类，类和对象asshole trade&quot;&gt;&lt;/a&gt;2.什么是类，类和对象asshole trade&lt;/h2&gt;&lt;p&gt;   我们会经常用到类这个字，比如说，人类，鸟类，鱼类……当我们把一些事物称为类的时候，他们往往都具有一些相同的特点，比如，马都有四条腿，马都能跑，但他们也并不是一样，可能这只马是腿长，那只马腿短，这只马壮实，那只马单薄，&lt;strong&gt;两匹马并不完全一样，但他们都是马类&lt;/strong&gt;，由此，我们可以得出类的定义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 类是拥有相同特点的不同个体的集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   编程中的类也一样，我们将一个或多个对象中的特点抽取出来，抽象成一个类，在C++中，我们使用class来定义一个类，比如说，我们定义一个上面提到的马类:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; horse&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; :  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; legcount; &lt;span class=&quot;comment&quot;&gt;//腿数，一般都是4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; leglength[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//腿长，这里每个马不一样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pao&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; qidian,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; zhongdian)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//每个马都能跑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;//别忘了这个分号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt; 有C基础的同学，可以将其暂时理解为，具有内置函数的结构体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   &lt;strong&gt;对象是类的具体实现&lt;/strong&gt;，比如说如果类是马，对象是就是其中的一匹马，类是horses，对象就是thehorse;对象是个体，拥有马类对象的一个个体；在C++中，我们可以按以下格式生成一个对象:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[class名] 对象名;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   比如，生成一个马的对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;horse andy;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   如上，我们定义了一个叫andy的马，他有四条腿，但不知道他腿有多长，他能跑，在C++中，我们可以用.运算符来访问它，比如:&lt;/p&gt;
 &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tui0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;horse andy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;andy.leglength[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]=tui0;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;   在C++中，我们需要在使用类之前定义类&lt;/p&gt;
&lt;p&gt;   同样我们也可用&lt;/p&gt;
&lt;p&gt;   horse anglababy;&lt;/p&gt;
&lt;p&gt;   来定义一个叫anglababy的马，他也有四条腿，他也有四条不知道多长的腿,他也能跑，我们可以用定义andy的方法来定义它&lt;/p&gt;
&lt;p&gt;   anglababy.leglength[0]=tui1;&lt;/p&gt;
&lt;p&gt;   也就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;同一类型的对象可以接受同样的消息&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;3-什么是面向对象编程&quot;&gt;&lt;a href=&quot;#3-什么是面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;3.什么是面向对象编程&quot;&gt;&lt;/a&gt;3.什么是面向对象编程&lt;/h2&gt;&lt;p&gt;   面向对象编程，就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;将问题分解为对象之间的交互&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   我们返回上边小明跳舞那里，现在，我们要实现小明跳舞这个事件。按照面向对象的设计思路，我们先提取出三个对象:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小明&lt;/li&gt;
&lt;li&gt;篮球场&lt;/li&gt;
&lt;li&gt;&lt;p&gt;普通的disco&lt;/p&gt;
&lt;p&gt;为了实现这三个对象，我们需要生成三个类：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;地点类&lt;/li&gt;
&lt;li&gt;&lt;p&gt;歌曲类&lt;/p&gt;
&lt;p&gt;抽象出对象之间的交互：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人在地点上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人在跳舞&lt;/p&gt;
&lt;p&gt;构建类:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; didian&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; didianming; &lt;span class=&quot;comment&quot;&gt;//地点名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; wu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; wuming; &lt;span class=&quot;comment&quot;&gt;//舞曲名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; human&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; xingming; &lt;span class=&quot;comment&quot;&gt;//人名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tiaowu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(wu a)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//跳舞&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;zaidi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(didian a)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//在地方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;小明跳舞的实现:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   human xiaom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   didian lanqiuc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   wu disco;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   xiaom.tiaowu(disco);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   xiaom.zaidi(lanqiuc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;这里省了去一些烦人的参数设置
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;4-面向对象设计的优点&quot;&gt;&lt;a href=&quot;#4-面向对象设计的优点&quot; class=&quot;headerlink&quot; title=&quot;4.面向对象设计的优点&quot;&gt;&lt;/a&gt;4.面向对象设计的优点&lt;/h2&gt;&lt;p&gt;  面相对象设计简化了&lt;strong&gt;程序设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  上述例子较为简单，使用面向过程的思想也较容易实现，但在实际的应用中，我们面对的不是小明在篮球场上跳舞这么简单的问题，而是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个身高1m8胡子拉碴的基佬小明穿着校服在中华人民共和国陕西省西安市西安电子科技大学北操场和一群人团体跳超大音响播放的普通的disco&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  这看起来可能相当复杂，但实际上我们只要将小明，操场，舞曲的特点加到类里，就可以很容易的实现了。&lt;/p&gt;
&lt;p&gt;  同理，再实现了胡子拉碴基佬小明的舞蹈之后，我们也可以实现皮肤很白的十分妹的跳舞，也可以实现广场舞大妈的跳舞，面向对象提供了不小的适用性。&lt;/p&gt;
&lt;p&gt;  另一方面，也可以让这个程序交给完全不同的三个人设计——前提是他们商量好了交互的协议，甚至是&lt;strong&gt;程序设计的流水线&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;下篇-从C到C-2-：你好，世界&quot;&gt;&lt;a href=&quot;#下篇-从C到C-2-：你好，世界&quot; class=&quot;headerlink&quot; title=&quot;下篇 从C到C++(2)：你好，世界&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://scannery.github.io/2016/05/18/cplus2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下篇&lt;/a&gt; 从C到C++(2)：你好，世界&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文目的是让读者更简单的理解面向对象的概念，所以会有不严谨的地方，请原谅&lt;/p&gt;
&lt;p&gt;本系列内容适合有C基础的朋友阅读，如没有请戳&lt;a href=&quot;http://c.biancheng.net/cpp/u/c18/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-什么是对象&quot;&gt;&lt;a href=&quot;#1-什么是对象&quot; class=&quot;headerlink&quot; title=&quot;1.什么是对象&quot;&gt;&lt;/a&gt;1.什么是对象&lt;/h2&gt;&lt;p&gt;   对象是什么？你的女朋友，或者你未来会有的女朋友，然后呢，举个小学语文上的例子：&lt;/p&gt;
&lt;p&gt;   小明在篮球场跳&lt;a href=&quot;http://www.bilibili.com/video/av2130097/&quot;&gt;普通的disco&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   是谁在篮球场发疯呢？是小明，也就是说，在篮球场上发疯的&lt;strong&gt;对象&lt;/strong&gt;是&lt;strong&gt;小明&lt;/strong&gt;，小明就是一个对象;那我们换个问法呢，小明在哪儿发疯呢？是篮球场，同理我们可以得出，&lt;strong&gt;篮球场&lt;/strong&gt;是小明跳舞的&lt;strong&gt;对象&lt;/strong&gt;。当然，智商比作者高的你肯定能得出一个结论，那普通的disco也是对象咯？答案是正确的，我们可以得出一个结论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;万物皆对象&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   “但是，小明他爱跳跳，关我卵事啊？”&lt;/p&gt;
&lt;p&gt;   是的，我们并不关心小明跳不跳舞，我们只关心我们需要的东西，所以，在编程中，我们将我们需要解决的问题，这个问题所需要的东西，抽象为对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在编程中，我们只会用到自己需要的对象，并舍弃不必要的对象&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/Scannery/Scannery.github.io/2016/05/10/hello-world/"/>
    <id>https://github.com/Scannery/Scannery.github.io/2016/05/10/hello-world/</id>
    <published>2016-05-10T15:42:44.935Z</published>
    <updated>2016-05-14T02:55:58.601Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
